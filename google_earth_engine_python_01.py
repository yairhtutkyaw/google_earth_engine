# -*- coding: utf-8 -*-
"""Google_earth_engine_python_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHBZyOewZ0rDQMZ6tdItpfvVcVlNqn80
"""

# earth engine jupyter အား install ပြုလုပ်ခြင်း
try:
  import ee_jupyter
  print('ee_jupyter was already installed.')
except ModuleNotFoundError:
  print('ee_jupyter was not found. Installing now...')
  import os
  result = os.system('pip -q install earthengine-jupyter')

"""# earth engine နဲ့ လိုအပ်သော libraries များအား import လုပ်ခြင်း"""

# earth engine account အား access လုပ်ခြင်း
import ee

# Trigger the authentication flow.
ee.Authenticate()

# Initialize the library.
ee.Initialize()

import altair as alt
from ee_jupyter.colab import set_colab_output_cell_height
from ee_jupyter.ipyleaflet import Map
from ee_jupyter.ipyleaflet import Inspector
from ee_jupyter.layout import MapWithInspector as MapPlus
import ipyleaflet
import ipywidgets as widgets
from IPython.display import HTML
import math
import numpy as np
import pandas as pd
from pprint import pprint

"""## DEM အားအသုံးပြုခြင်း"""

dem=ee.Image('CGIAR/SRTM90_V4')

set_colab_output_cell_height(300)
pprint(dem.getInfo())

location=[24.18222,96.33056] #katha township location
map_init_params={
    'center':list(location), #lat,lon
    'zoom':10
}

map1=Map(**map_init_params)
map1

# ပထမလုပ်ထားတဲ့ နေရာကို layer အသစ်ပေါင်းထည့်ခြင်း
map1.addLayer(dem,{'min':0,'max':1000},'elevation(greyscale)')

map1.addLayer(
    dem,
    {'min':0,'max':1000,'palette':['grey','yellow','red']},
    'elevation(custom palette)'
)

"""## computation using images"""

# apply an algorithm to an image
slope=ee.Terrain.slope(dem)

#  display
map2a=Map(**map_init_params)
map2a.addLayer(dem,{'min':0,'max':1000},'elevation[meters]')

# slope is calculated in degrees so 30 degrees was chosen as the max for this
# area. In general, is rare to go above 45 degrees.
map2a.addLayer(slope,{'min':0,'max':45},'slope[degrees')
map2a

"""## Using Map Inspector"""

inspector2a=Inspector(map2a)
widgets.HBox([map2a,inspector2a])

# နောက်ထပ် layer ထည့်နည်း
map_panel_2=MapPlus(**map_init_params)
map_panel_2.map.addLayer(dem,{'min':0,'max':1000},'elevation[meters]')
map_panel_2.map.addLayer(slope,{'min':0,'max':30},'slope [degrees]')
map_panel_2

"""## Aspect

The aspect is the orientation of the slope, measured clockwise in degrees from 0 to 360, where 0 is north-facing, 90 is east-facing, 180 is south-facing and 270 is west-facing.
"""

aspect=ee.Terrain.aspect(dem)

# convert to radians, compute the sine of the aspect
sinImage=aspect.divide(180).multiply(np.pi).sin()

# Display maps side-by-side

map_params_mount_popa={
    'center':(20.921162982,95.250332332),
    'zoom':10
}
map2b=Map(**map_params_mount_popa)
map2b.addLayer(dem,{'min':0,'max':4000},'elevation [meters]')
map2c=Map(**map_params_mount_popa)
map2c.addLayer(
    sinImage,
    {'min':-1,'max':1,'palette':['yellow','white','red']},
    'sine of aspect'
)
# west...yellow, white.....north/south, east.......red
widgets.HBox([map2b,map2c])

# center အားပြန်ကြည့်ခြင်း
map2b.center

"""### Image statistics"""

# use ipyleaflet to add the ability to draw a geometry on map
draw_control=ipyleaflet.DrawControl(
    rectangle={},
    polyline={},
    circlemarker={}
)
def handle_draw(target,action,geo_json):
  with output:
    output.clear_output()
    pprint(geo_json)
  draw_control.on_draw(handle_draw)

map2d=Map(**map_init_params)
output=widgets.Output(layout={'border':'1px solid black','width':'200'})
map2d.addLayer(dem,{'min':0,'max':1000},'elevation [meters]')
map2d.add_control(draw_control)
widgets.VBox([map2d,output])

geom_clientside=draw_control.last_draw['geometry']
geom_clientside

"""##  Spatial reduction: calculate stats for custom geometry"""

# create an earth engine server-side geometry
geom=ee.Geometry(geom_clientside)

# compute mean elevation in the polygon
meandict=dem.reduceRegion(
    reducer=ee.Reducer.mean(),
    geometry=geom,
    scale=90,
    bestEffort=True
)

# get the mean from the dictionary and print it
mean=meandict.get('elevation')
print('Mean elevation',mean.getInfo())